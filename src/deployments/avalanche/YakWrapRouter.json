{
  "address": "0x949B99c21B0B62B20cAADf912109929c78049112",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSteps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        }
      ],
      "name": "findBestPathAndWrap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct FormattedOffer",
          "name": "bestOffer",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IYakRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSteps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        }
      ],
      "name": "unwrapAndFindBestPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct FormattedOffer",
          "name": "bestOffer",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a32007a3a1eb9b50a8c11a4bb80ef3372c1833ff64327458f5c7afb1f1bff6e",
  "receipt": {
    "to": null,
    "from": "0x1A267D3f9f5116dF6ae00A4aD698CdcF27b71920",
    "contractAddress": "0x949B99c21B0B62B20cAADf912109929c78049112",
    "transactionIndex": 6,
    "gasUsed": "1791417",
    "logsBloom": "0x
    "blockHash": "0xce1a7223d11f383c299a9f512fbd3efe0e5349ae4d80236cb50303df04dd5c4a",
    "transactionHash": "0x5a32007a3a1eb9b50a8c11a4bb80ef3372c1833ff64327458f5c7afb1f1bff6e",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 46954911,
        "transactionHash": "0x5a32007a3a1eb9b50a8c11a4bb80ef3372c1833ff64327458f5c7afb1f1bff6e",
        "address": "0x949B99c21B0B62B20cAADf912109929c78049112",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001a267d3f9f5116df6ae00a4ad698cdcf27b71920",
          "0x0000000000000000000000001a267d3f9f5116df6ae00a4ad698cdcf27b71920"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xce1a7223d11f383c299a9f512fbd3efe0e5349ae4d80236cb50303df04dd5c4a"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 46954911,
        "transactionHash": "0x5a32007a3a1eb9b50a8c11a4bb80ef3372c1833ff64327458f5c7afb1f1bff6e",
        "address": "0x949B99c21B0B62B20cAADf912109929c78049112",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x0000000000000000000000001a267d3f9f5116df6ae00a4ad698cdcf27b71920",
          "0x0000000000000000000000001a267d3f9f5116df6ae00a4ad698cdcf27b71920"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xce1a7223d11f383c299a9f512fbd3efe0e5349ae4d80236cb50303df04dd5c4a"
      }
    ],
    "blockNumber": 46954911,
    "cumulativeGasUsed": "2055943",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEaE98D2834DE23Dd56982c74571de89149C3642a"
  ],
  "solcInputHash": "19acba8bd2ff6e1270319735883515f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSteps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"findBestPathAndWrap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct FormattedOffer\",\"name\":\"bestOffer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IYakRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSteps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"unwrapAndFindBestPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct FormattedOffer\",\"name\":\"bestOffer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/YakWrapRouter.sol\":\"YakWrapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakWrapRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IYakRouter.sol\\\";\\nimport \\\"./interface/IWrapper.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\nimport \\\"./lib/YakViewUtils.sol\\\";\\n\\ncontract YakWrapRouter is Maintainable {\\n    using FormattedOfferUtils for FormattedOffer;\\n    using OfferUtils for Offer;\\n\\n    IYakRouter public router;\\n\\n    constructor(address _router) {\\n        setRouter(_router);\\n    }\\n\\n    function setRouter(address _router) public onlyMaintainer {\\n        router = IYakRouter(_router);\\n    }\\n\\n    function findBestPathAndWrap(uint256 amountIn, address tokenIn, address wrapper, uint256 maxSteps, uint256 gasPrice)\\n        external\\n        view\\n        returns (FormattedOffer memory bestOffer)\\n    {\\n        address[] memory wrapperTokenIn = IWrapper(wrapper).getTokensIn();\\n        address wrappedToken = IWrapper(wrapper).getWrappedToken();\\n        uint256 gasEstimate = IWrapper(wrapper).swapGasEstimate();\\n\\n        for (uint256 i; i < wrapperTokenIn.length; ++i) {\\n            FormattedOffer memory offer;\\n            uint256 wrappedAmountOut;\\n            if (wrapperTokenIn[i] != tokenIn) {\\n                offer = router.findBestPathWithGas(amountIn, tokenIn, wrapperTokenIn[i], maxSteps, gasPrice);\\n                wrappedAmountOut =\\n                    IWrapper(wrapper).query(offer.amounts[offer.amounts.length - 1], wrapperTokenIn[i], wrappedToken);\\n            } else {\\n                wrappedAmountOut = IWrapper(wrapper).query(amountIn, tokenIn, wrappedToken);\\n                Offer memory query = OfferUtils.newOffer(amountIn, tokenIn);\\n                offer = query.format();\\n            }\\n\\n            if (i == 0 || wrappedAmountOut > bestOffer.getAmountOut()) {\\n                offer.addToTail(wrappedAmountOut, wrapper, wrappedToken, gasEstimate);\\n                bestOffer = offer;\\n            }\\n        }\\n    }\\n\\n    function unwrapAndFindBestPath(\\n        uint256 amountIn,\\n        address tokenOut,\\n        address wrapper,\\n        uint256 maxSteps,\\n        uint256 gasPrice\\n    ) external view returns (FormattedOffer memory bestOffer) {\\n        address[] memory wrapperTokenOut = IWrapper(wrapper).getTokensOut();\\n        address wrappedToken = IWrapper(wrapper).getWrappedToken();\\n        uint256 gasEstimate = IWrapper(wrapper).swapGasEstimate();\\n\\n        for (uint256 i; i < wrapperTokenOut.length; ++i) {\\n            uint256 amountOut = IWrapper(wrapper).query(amountIn, wrappedToken, wrapperTokenOut[i]);\\n            if (amountOut == 0) continue;\\n\\n            FormattedOffer memory offer;\\n            if (wrapperTokenOut[i] != tokenOut) {\\n                offer = router.findBestPathWithGas(amountOut, wrapperTokenOut[i], tokenOut, maxSteps, gasPrice);\\n                amountOut = offer.getAmountOut();\\n            } else {\\n                Offer memory query = OfferUtils.newOffer(amountIn, wrappedToken);\\n                offer = query.format();\\n            }\\n\\n            if (bestOffer.amounts.length == 0 || amountOut > bestOffer.getAmountOut()) {\\n                if (wrapperTokenOut[i] != tokenOut) {\\n                    offer.addToHead(amountIn, wrapper, wrappedToken, gasEstimate);\\n                } else {\\n                    offer.addToTail(amountOut, wrapper, tokenOut, gasEstimate);\\n                }\\n                bestOffer = offer;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7384734543c47f85bea4ae9c5267f6cedfe39af33d30e544a6da3fb50e4c25f0\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAdapter {\\n    function name() external view returns (string memory);\\n\\n    function swapGasEstimate() external view returns (uint256);\\n\\n    function swap(\\n        uint256,\\n        uint256,\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function query(\\n        uint256,\\n        address,\\n        address\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7efd1e561a2a064daefd8d690518f6cb23b83fbf6da172030c0c31fd8dafb073\",\"license\":\"MIT\"},\"src/contracts/interface/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAdapter.sol\\\";\\n\\ninterface IWrapper is IAdapter {\\n    function getTokensIn() external view returns (address[] memory);\\n    function getTokensOut() external view returns (address[] memory);\\n    function getWrappedToken() external view returns (address);\\n}\",\"keccak256\":\"0x8671711033a9cdf87b66952d24ea61f9f9de586c71696c6498d4b71f623d2731\",\"license\":\"MIT\"},\"src/contracts/interface/IYakRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nstruct Query {\\n    address adapter;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountOut;\\n}\\nstruct Offer {\\n    bytes amounts;\\n    bytes adapters;\\n    bytes path;\\n    uint256 gasEstimate;\\n}\\nstruct FormattedOffer {\\n    uint256[] amounts;\\n    address[] adapters;\\n    address[] path;\\n    uint256 gasEstimate;\\n}\\nstruct Trade {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address[] path;\\n    address[] adapters;\\n}\\n\\ninterface IYakRouter {\\n\\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\\n    event UpdatedAdapters(address[] _newAdapters);\\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\\n\\n    // admin\\n    function setTrustedTokens(address[] memory _trustedTokens) external;\\n    function setAdapters(address[] memory _adapters) external;\\n    function setFeeClaimer(address _claimer) external;\\n    function setMinFee(uint256 _fee) external;\\n\\n    // misc\\n    function trustedTokensCount() external view returns (uint256);\\n    function adaptersCount() external view returns (uint256);\\n\\n    // query\\n\\n    function queryAdapter(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint8 _index\\n    ) external returns (uint256);\\n\\n    function queryNoSplit(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint8[] calldata _options\\n    ) external view returns (Query memory);\\n\\n    function queryNoSplit(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (Query memory);\\n\\n    function findBestPathWithGas(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps,\\n        uint256 _gasPrice\\n    ) external view returns (FormattedOffer memory);\\n\\n    function findBestPath(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps\\n    ) external view returns (FormattedOffer memory);\\n\\n    // swap\\n\\n    function swapNoSplit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee\\n    ) external;\\n\\n    function swapNoSplitFromAVAX(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee\\n    ) external payable;\\n\\n    function swapNoSplitToAVAX(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee\\n    ) external; \\n\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function swapNoSplitToAVAXWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n}\",\"keccak256\":\"0x8660677f248e2fef62557cd7d86968a8af01baa85cd3f3045c6d010d01f0e623\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/TypeConversion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n\\nlibrary TypeConversion {\\n\\n    function toBytes12(address x) internal pure returns (bytes12 y) {\\n        assembly { y := x }\\n    }\\n\\n    function toBytes32(address x) internal pure returns (bytes32 y) {\\n        assembly { y := x }\\n    }\\n\\n    function toAddress(bytes32 x) internal pure returns (address y) {\\n        assembly { y := x }\\n    }\\n\\n    function toBytes(address x) internal pure returns (bytes memory y) {\\n        y = new bytes(32);\\n        assembly { mstore(add(y, 32), x) }\\n    }\\n\\n    function toBytes(bytes32 x) internal pure returns (bytes memory y) {\\n        y = new bytes(32);\\n        assembly { mstore(add(y, 32), x) }\\n    }\\n\\n    function toBytes(uint x) internal pure returns (bytes memory y) {\\n        y = new bytes(32);\\n        assembly { mstore(add(y, 32), x) }\\n    }\\n\\n    function toAddress(\\n        bytes memory x,\\n        uint offset\\n    ) internal pure returns (address y) {\\n        assembly { y := mload(add(x, offset)) }\\n    }\\n\\n    function toUint(\\n        bytes memory x,\\n        uint offset\\n    ) internal pure returns (uint y) {\\n        assembly { y := mload(add(x, offset)) }\\n    }\\n\\n    function toBytes12(\\n        bytes memory x,\\n        uint offset\\n    ) internal pure returns (bytes12 y) {\\n        assembly { y := mload(add(x, offset)) }\\n    }\\n\\n    function toBytes32(\\n        bytes memory x,\\n        uint offset\\n    ) internal pure returns (bytes32 y) {\\n        assembly { y := mload(add(x, offset)) }\\n    }\\n\\n    function toAddresses(\\n        bytes memory xs\\n    ) internal pure returns (address[] memory ys) {\\n        ys = new address[](xs.length/32);\\n        for (uint i=0; i < xs.length/32; i++) {\\n            ys[i] = toAddress(xs, i*32 + 32);\\n        }\\n    }\\n\\n    function toUints(\\n        bytes memory xs\\n    ) internal pure returns (uint[] memory ys) {\\n        ys = new uint[](xs.length/32);\\n        for (uint i=0; i < xs.length/32; i++) {\\n            ys[i] = toUint(xs, i*32 + 32);\\n        }\\n    }\\n\\n    function toBytes32s(\\n        bytes memory xs\\n    ) internal pure returns (bytes32[] memory ys) {\\n        ys = new bytes32[](xs.length/32);\\n        for (uint i=0; i < xs.length/32; i++) {\\n            ys[i] = toBytes32(xs, i*32 + 32);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa3a67bf37fbab7fd2edd745d8d1d1e4c4c18fb5d1c2a2c84af10e00e28caa165\",\"license\":\"MIT\"},\"src/contracts/lib/YakViewUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport { Offer, FormattedOffer } from \\\"../interface/IYakRouter.sol\\\";\\nimport \\\"./TypeConversion.sol\\\";\\n\\n\\nlibrary OfferUtils {\\n    using TypeConversion for address;\\n    using TypeConversion for uint256;\\n    using TypeConversion for bytes;\\n\\n    function newOffer(\\n        uint _amountIn,\\n        address _tokenIn\\n    ) internal pure returns (Offer memory offer) {\\n        offer.amounts = _amountIn.toBytes();\\n        offer.path = _tokenIn.toBytes();\\n    }\\n\\n    /**\\n     * Makes a deep copy of Offer struct\\n     */\\n    function clone(Offer memory _queries) internal pure returns (Offer memory) {\\n        return Offer(_queries.amounts, _queries.adapters, _queries.path, _queries.gasEstimate);\\n    }\\n\\n    /**\\n     * Appends new elements to the end of Offer struct\\n     */\\n    function addToTail(\\n        Offer memory _queries,\\n        uint256 _amount,\\n        address _adapter,\\n        address _tokenOut,\\n        uint256 _gasEstimate\\n    ) internal pure {\\n        _queries.path = bytes.concat(_queries.path, _tokenOut.toBytes());\\n        _queries.adapters = bytes.concat(_queries.adapters, _adapter.toBytes());\\n        _queries.amounts = bytes.concat(_queries.amounts, _amount.toBytes());\\n        _queries.gasEstimate += _gasEstimate;\\n    }\\n\\n    /**\\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\\n     */\\n    function format(Offer memory _queries) internal pure returns (FormattedOffer memory) {\\n        return\\n            FormattedOffer(\\n                _queries.amounts.toUints(),\\n                _queries.adapters.toAddresses(),\\n                _queries.path.toAddresses(),\\n                _queries.gasEstimate\\n            );\\n    }\\n\\n    function getTokenOut(\\n        Offer memory _offer\\n    ) internal pure returns (address tokenOut) {\\n        tokenOut = _offer.path.toAddress(_offer.path.length);  // Last 32 bytes\\n    }\\n\\n    function getAmountOut(\\n        Offer memory _offer\\n    ) internal pure returns (uint amountOut) {\\n        amountOut = _offer.amounts.toUint(_offer.path.length);  // Last 32 bytes\\n    }\\n\\n}\\n\\nlibrary FormattedOfferUtils {\\n    using TypeConversion for address;\\n    using TypeConversion for uint256;\\n    using TypeConversion for bytes;\\n\\n    /**\\n     * Appends new elements to the end of FormattedOffer\\n     */\\n    function addToTail(\\n        FormattedOffer memory offer, \\n        uint256 amountOut, \\n        address wrapper,\\n        address tokenOut,\\n        uint256 gasEstimate\\n    ) internal pure {\\n        offer.amounts = bytes.concat(abi.encodePacked(offer.amounts), amountOut.toBytes()).toUints();\\n        offer.adapters = bytes.concat(abi.encodePacked(offer.adapters), wrapper.toBytes()).toAddresses();\\n        offer.path = bytes.concat(abi.encodePacked(offer.path), tokenOut.toBytes()).toAddresses();\\n        offer.gasEstimate += gasEstimate;\\n    }\\n\\n    /**\\n     * Appends new elements to the beginning of FormattedOffer\\n     */\\n    function addToHead(\\n        FormattedOffer memory offer, \\n        uint256 amountOut, \\n        address wrapper,\\n        address tokenOut,\\n        uint256 gasEstimate\\n    ) internal pure {\\n        offer.amounts = bytes.concat(amountOut.toBytes(), abi.encodePacked(offer.amounts)).toUints();\\n        offer.adapters = bytes.concat(wrapper.toBytes(), abi.encodePacked(offer.adapters)).toAddresses();\\n        offer.path = bytes.concat(tokenOut.toBytes(), abi.encodePacked(offer.path)).toAddresses();\\n        offer.gasEstimate += gasEstimate;\\n    }\\n\\n    function getAmountOut(FormattedOffer memory offer) internal pure returns (uint256) {\\n        return offer.amounts[offer.amounts.length - 1];\\n    }\\n\\n}\",\"keccak256\":\"0x5772d3d1d410b2019ffe8b1b646b2532d8a7edacd00ed091ee21bc180b9be2b4\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002031380380620020318339810160408190526200003491620001e8565b336200004260008262000081565b6200006e7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab958262000081565b506200007a8162000091565b5062000218565b6200008d828262000148565b5050565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16620001255760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b606482015260840160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200008d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001a43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600060208284031215620001fa578081fd5b81516001600160a01b038116811462000211578182fd5b9392505050565b611e0980620002286000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639ddb764d11610097578063d8baf7cf11610066578063d8baf7cf14610244578063f2fde38b14610257578063f87422541461026a578063f887ea401461029157600080fd5b80639ddb764d14610203578063a217fddf14610216578063c0d786551461021e578063d547741f1461023157600080fd5b80636b453c1f116100d35780636b453c1f146101865780638bb9c5bf1461019957806391d14854146101ac578063980d473a146101e357600080fd5b806301ffc9a714610105578063248a9ca31461012d5780632f2ff15d1461015e57806336568abe14610173575b600080fd5b6101186101133660046118ce565b6102bc565b60405190151581526020015b60405180910390f35b61015061013b366004611887565b60009081526020819052604090206001015490565b604051908152602001610124565b61017161016c36600461189f565b610325565b005b61017161018136600461189f565b61034f565b610171610194366004611814565b6103e0565b6101716101a7366004611887565b61040d565b6101186101ba36600461189f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f66101f13660046119ca565b610418565b6040516101249190611baa565b6101f66102113660046119ca565b610907565b610150600081565b61017161022c366004611814565b610d76565b61017161023f36600461189f565b610e55565b610171610252366004611814565b610e7a565b610171610265366004611814565b610ea4565b6101507f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6001546102a4906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061031f57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60008281526020819052604090206001015461034081610ebb565b61034a8383610ec5565b505050565b6001600160a01b03811633146103d25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6103dc8282610f63565b5050565b61040a7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610325565b50565b336103dc828261034f565b6104436040518060800160405280606081526020016060815260200160608152602001600081525090565b6000846001600160a01b031663213cae636040518163ffffffff1660e01b815260040160006040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ba919081019061184c565b90506000856001600160a01b031663f174e2416040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f757600080fd5b505afa15801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052f9190611830565b90506000866001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561056c57600080fd5b505afa158015610580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a491906119b2565b905060005b83518110156108fa576105dd6040518060800160405280606081526020016060815260200160608152602001600081525090565b60008a6001600160a01b031686848151811061060957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146107ff5760015486516001600160a01b039091169063061b15e7908e908e908a908890811061065a57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606481018c9052608481018b905260a40160006040518083038186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106fc91908101906118f6565b805180519193506001600160a01b038c169163ef99893a919061072190600190611d19565b8151811061073f57634e487b7160e01b600052603260045260246000fd5b602002602001015188868151811061076757634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518463ffffffff1660e01b81526004016107a8939291909283526001600160a01b03918216602084015216604082015260600190565b60206040518083038186803b1580156107c057600080fd5b505afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f891906119b2565b90506108bd565b6040517fef99893a000000000000000000000000000000000000000000000000000000008152600481018d90526001600160a01b038c8116602483015286811660448301528b169063ef99893a9060640160206040518083038186803b15801561086857600080fd5b505afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a091906119b2565b905060006108ae8d8d610fe2565b90506108b981611035565b9250505b8215806108d157506108ce876110b0565b81115b156108e7576108e382828c88886110f1565b8196505b5050806108f390611d77565b90506105a9565b5050505095945050505050565b6109326040518060800160405280606081526020016060815260200160608152602001600081525090565b6000846001600160a01b031663071bc3c96040518163ffffffff1660e01b815260040160006040518083038186803b15801561096d57600080fd5b505afa158015610981573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109a9919081019061184c565b90506000856001600160a01b031663f174e2416040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e657600080fd5b505afa1580156109fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1e9190611830565b90506000866001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5b57600080fd5b505afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9391906119b2565b905060005b83518110156108fa576000886001600160a01b031663ef99893a8c86888681518110610ad457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401610b14939291909283526001600160a01b03918216602084015216604082015260600190565b60206040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906119b2565b905080610b715750610d66565b610b9c6040518060800160405280606081526020016060815260200160608152602001600081525090565b8a6001600160a01b0316868481518110610bc657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614610cca5760015486516001600160a01b039091169063061b15e7908490899087908110610c1557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e085901b16815260048101929092526001600160a01b0390811660248301528e166044820152606481018c9052608481018b905260a40160006040518083038186803b158015610c7c57600080fd5b505afa158015610c90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cb891908101906118f6565b9050610cc3816110b0565b9150610ce5565b6000610cd68d87610fe2565b9050610ce181611035565b9150505b8651511580610cfb5750610cf8876110b0565b82115b15610d63578a6001600160a01b0316868481518110610d2a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614610d5257610d4d818d8c8888611207565b610d5f565b610d5f81838c8e886110f1565b8096505b50505b610d6f81611d77565b9050610a98565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610e1a5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e657200000000000000000000000000000000000000000000000060648201526084016103c9565b50600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600082815260208190526040902060010154610e7081610ebb565b61034a8383610f63565b61040a7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610e55565b33610eb0600083610325565b6103dc60008261034f565b61040a81336112ba565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103dc576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f1f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156103dc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61100d6040518060800160405280606081526020016060815260200160608152602001600081525090565b61101683611338565b815261102a6001600160a01b038316611338565b604082015292915050565b6110606040518060800160405280606081526020016060815260200160608152602001600081525090565b60405180608001604052806110788460000151611362565b815260200161108a846020015161143e565b815260200161109c846040015161143e565b815260200183606001518152509050919050565b80518051600091906110c490600190611d19565b815181106110e257634e487b7160e01b600052603260045260246000fd5b60200260200101519050919050565b84516040516111439161110691602001611a9d565b60405160208183030381529060405261111e86611338565b60405160200161112f929190611ac7565b604051602081830303815290604052611362565b85526020808601516040516111a39261115d929101611a5e565b60405160208183030381529060405261117e856001600160a01b0316611338565b60405160200161118f929190611ac7565b60405160208183030381529060405261143e565b85602001819052506111e485604001516040516020016111c39190611a5e565b60405160208183030381529060405261117e846001600160a01b0316611338565b60408601526060850180518291906111fd908390611cc2565b9052505050505050565b61124361121385611338565b86516040516112259190602001611a9d565b60408051601f198184030181529082905261112f9291602001611ac7565b855261128b61125a6001600160a01b038516611338565b60208088015160405161126d9201611a5e565b60408051601f198184030181529082905261118f9291602001611ac7565b60208601526111e46112a56001600160a01b038416611338565b866040015160405160200161126d9190611a5e565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103dc576112f6816001600160a01b03166014611511565b611301836020611511565b604051602001611312929190611af6565b60408051601f198184030181529082905262461bcd60e51b82526103c991600401611b77565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b6060602082516113729190611cda565b67ffffffffffffffff81111561139857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113c1578160200160208202803683370190505b50905060005b602083516113d59190611cda565b811015611438576113fb836113eb836020611cfa565b6113f6906020611cc2565b015190565b82828151811061141b57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061143081611d77565b9150506113c7565b50919050565b60606020825161144e9190611cda565b67ffffffffffffffff81111561147457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561149d578160200160208202803683370190505b50905060005b602083516114b19190611cda565b811015611438576114c7836113eb836020611cfa565b8282815181106114e757634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528061150981611d77565b9150506114a3565b60606000611520836002611cfa565b61152b906002611cc2565b67ffffffffffffffff81111561155157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561157b576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106115c057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061161957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061163d846002611cfa565b611648906001611cc2565b90505b60018111156116e9577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061169757634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106116bb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936116e281611d60565b905061164b565b5083156117385760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103c9565b9392505050565b600082601f83011261174f578081fd5b8151602061176461175f83611c9e565b611c6d565b80838252828201915082860187848660051b8901011115611783578586fd5b855b858110156117aa57815161179881611dbe565b84529284019290840190600101611785565b5090979650505050505050565b600082601f8301126117c7578081fd5b815160206117d761175f83611c9e565b80838252828201915082860187848660051b89010111156117f6578586fd5b855b858110156117aa578151845292840192908401906001016117f8565b600060208284031215611825578081fd5b813561173881611dbe565b600060208284031215611841578081fd5b815161173881611dbe565b60006020828403121561185d578081fd5b815167ffffffffffffffff811115611873578182fd5b61187f8482850161173f565b949350505050565b600060208284031215611898578081fd5b5035919050565b600080604083850312156118b1578081fd5b8235915060208301356118c381611dbe565b809150509250929050565b6000602082840312156118df578081fd5b81356001600160e01b031981168114611738578182fd5b600060208284031215611907578081fd5b815167ffffffffffffffff8082111561191e578283fd5b9083019060808286031215611931578283fd5b611939611c44565b825182811115611947578485fd5b611953878286016117b7565b825250602083015182811115611967578485fd5b6119738782860161173f565b60208301525060408301518281111561198a578485fd5b6119968782860161173f565b6040830152506060830151606082015280935050505092915050565b6000602082840312156119c3578081fd5b5051919050565b600080600080600060a086880312156119e1578081fd5b8535945060208601356119f381611dbe565b93506040860135611a0381611dbe565b94979396509394606081013594506080013592915050565b6000815180845260208085019450808401835b83811015611a535781516001600160a01b031687529582019590820190600101611a2e565b509495945050505050565b815160009082906020808601845b83811015611a915781516001600160a01b031685529382019390820190600101611a6c565b50929695505050505050565b815160009082906020808601845b83811015611a9157815185529382019390820190600101611aab565b60008351611ad9818460208801611d30565b835190830190611aed818360208801611d30565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611b2e816017850160208801611d30565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611b6b816028840160208801611d30565b01602801949350505050565b6020815260008251806020840152611b96816040850160208701611d30565b601f01601f19169190910160400192915050565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b80831015611bef5783518252928401926001929092019190840190611bcf565b50838701519350601f19925082868203016040870152611c0f8185611a1b565b93505050604085015181858403016060860152611c2c8382611a1b565b92505050606084015160808401528091505092915050565b6040516080810167ffffffffffffffff81118282101715611c6757611c67611da8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c9657611c96611da8565b604052919050565b600067ffffffffffffffff821115611cb857611cb8611da8565b5060051b60200190565b60008219821115611cd557611cd5611d92565b500190565b600082611cf557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611d1457611d14611d92565b500290565b600082821015611d2b57611d2b611d92565b500390565b60005b83811015611d4b578181015183820152602001611d33565b83811115611d5a576000848401525b50505050565b600081611d6f57611d6f611d92565b506000190190565b6000600019821415611d8b57611d8b611d92565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461040a57600080fdfea26469706673582212204c007dff74061c66d38d079aef1102ad7f361f802959962b06eda0ce4d3a1b4064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80639ddb764d11610097578063d8baf7cf11610066578063d8baf7cf14610244578063f2fde38b14610257578063f87422541461026a578063f887ea401461029157600080fd5b80639ddb764d14610203578063a217fddf14610216578063c0d786551461021e578063d547741f1461023157600080fd5b80636b453c1f116100d35780636b453c1f146101865780638bb9c5bf1461019957806391d14854146101ac578063980d473a146101e357600080fd5b806301ffc9a714610105578063248a9ca31461012d5780632f2ff15d1461015e57806336568abe14610173575b600080fd5b6101186101133660046118ce565b6102bc565b60405190151581526020015b60405180910390f35b61015061013b366004611887565b60009081526020819052604090206001015490565b604051908152602001610124565b61017161016c36600461189f565b610325565b005b61017161018136600461189f565b61034f565b610171610194366004611814565b6103e0565b6101716101a7366004611887565b61040d565b6101186101ba36600461189f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f66101f13660046119ca565b610418565b6040516101249190611baa565b6101f66102113660046119ca565b610907565b610150600081565b61017161022c366004611814565b610d76565b61017161023f36600461189f565b610e55565b610171610252366004611814565b610e7a565b610171610265366004611814565b610ea4565b6101507f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6001546102a4906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061031f57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60008281526020819052604090206001015461034081610ebb565b61034a8383610ec5565b505050565b6001600160a01b03811633146103d25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6103dc8282610f63565b5050565b61040a7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610325565b50565b336103dc828261034f565b6104436040518060800160405280606081526020016060815260200160608152602001600081525090565b6000846001600160a01b031663213cae636040518163ffffffff1660e01b815260040160006040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ba919081019061184c565b90506000856001600160a01b031663f174e2416040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f757600080fd5b505afa15801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052f9190611830565b90506000866001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561056c57600080fd5b505afa158015610580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a491906119b2565b905060005b83518110156108fa576105dd6040518060800160405280606081526020016060815260200160608152602001600081525090565b60008a6001600160a01b031686848151811061060957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146107ff5760015486516001600160a01b039091169063061b15e7908e908e908a908890811061065a57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606481018c9052608481018b905260a40160006040518083038186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106fc91908101906118f6565b805180519193506001600160a01b038c169163ef99893a919061072190600190611d19565b8151811061073f57634e487b7160e01b600052603260045260246000fd5b602002602001015188868151811061076757634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518463ffffffff1660e01b81526004016107a8939291909283526001600160a01b03918216602084015216604082015260600190565b60206040518083038186803b1580156107c057600080fd5b505afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f891906119b2565b90506108bd565b6040517fef99893a000000000000000000000000000000000000000000000000000000008152600481018d90526001600160a01b038c8116602483015286811660448301528b169063ef99893a9060640160206040518083038186803b15801561086857600080fd5b505afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a091906119b2565b905060006108ae8d8d610fe2565b90506108b981611035565b9250505b8215806108d157506108ce876110b0565b81115b156108e7576108e382828c88886110f1565b8196505b5050806108f390611d77565b90506105a9565b5050505095945050505050565b6109326040518060800160405280606081526020016060815260200160608152602001600081525090565b6000846001600160a01b031663071bc3c96040518163ffffffff1660e01b815260040160006040518083038186803b15801561096d57600080fd5b505afa158015610981573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109a9919081019061184c565b90506000856001600160a01b031663f174e2416040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e657600080fd5b505afa1580156109fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1e9190611830565b90506000866001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5b57600080fd5b505afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9391906119b2565b905060005b83518110156108fa576000886001600160a01b031663ef99893a8c86888681518110610ad457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401610b14939291909283526001600160a01b03918216602084015216604082015260600190565b60206040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906119b2565b905080610b715750610d66565b610b9c6040518060800160405280606081526020016060815260200160608152602001600081525090565b8a6001600160a01b0316868481518110610bc657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614610cca5760015486516001600160a01b039091169063061b15e7908490899087908110610c1557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e085901b16815260048101929092526001600160a01b0390811660248301528e166044820152606481018c9052608481018b905260a40160006040518083038186803b158015610c7c57600080fd5b505afa158015610c90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cb891908101906118f6565b9050610cc3816110b0565b9150610ce5565b6000610cd68d87610fe2565b9050610ce181611035565b9150505b8651511580610cfb5750610cf8876110b0565b82115b15610d63578a6001600160a01b0316868481518110610d2a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614610d5257610d4d818d8c8888611207565b610d5f565b610d5f81838c8e886110f1565b8096505b50505b610d6f81611d77565b9050610a98565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610e1a5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e657200000000000000000000000000000000000000000000000060648201526084016103c9565b50600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600082815260208190526040902060010154610e7081610ebb565b61034a8383610f63565b61040a7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610e55565b33610eb0600083610325565b6103dc60008261034f565b61040a81336112ba565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103dc576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f1f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156103dc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61100d6040518060800160405280606081526020016060815260200160608152602001600081525090565b61101683611338565b815261102a6001600160a01b038316611338565b604082015292915050565b6110606040518060800160405280606081526020016060815260200160608152602001600081525090565b60405180608001604052806110788460000151611362565b815260200161108a846020015161143e565b815260200161109c846040015161143e565b815260200183606001518152509050919050565b80518051600091906110c490600190611d19565b815181106110e257634e487b7160e01b600052603260045260246000fd5b60200260200101519050919050565b84516040516111439161110691602001611a9d565b60405160208183030381529060405261111e86611338565b60405160200161112f929190611ac7565b604051602081830303815290604052611362565b85526020808601516040516111a39261115d929101611a5e565b60405160208183030381529060405261117e856001600160a01b0316611338565b60405160200161118f929190611ac7565b60405160208183030381529060405261143e565b85602001819052506111e485604001516040516020016111c39190611a5e565b60405160208183030381529060405261117e846001600160a01b0316611338565b60408601526060850180518291906111fd908390611cc2565b9052505050505050565b61124361121385611338565b86516040516112259190602001611a9d565b60408051601f198184030181529082905261112f9291602001611ac7565b855261128b61125a6001600160a01b038516611338565b60208088015160405161126d9201611a5e565b60408051601f198184030181529082905261118f9291602001611ac7565b60208601526111e46112a56001600160a01b038416611338565b866040015160405160200161126d9190611a5e565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103dc576112f6816001600160a01b03166014611511565b611301836020611511565b604051602001611312929190611af6565b60408051601f198184030181529082905262461bcd60e51b82526103c991600401611b77565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b6060602082516113729190611cda565b67ffffffffffffffff81111561139857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113c1578160200160208202803683370190505b50905060005b602083516113d59190611cda565b811015611438576113fb836113eb836020611cfa565b6113f6906020611cc2565b015190565b82828151811061141b57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061143081611d77565b9150506113c7565b50919050565b60606020825161144e9190611cda565b67ffffffffffffffff81111561147457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561149d578160200160208202803683370190505b50905060005b602083516114b19190611cda565b811015611438576114c7836113eb836020611cfa565b8282815181106114e757634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528061150981611d77565b9150506114a3565b60606000611520836002611cfa565b61152b906002611cc2565b67ffffffffffffffff81111561155157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561157b576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106115c057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061161957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061163d846002611cfa565b611648906001611cc2565b90505b60018111156116e9577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061169757634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106116bb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936116e281611d60565b905061164b565b5083156117385760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103c9565b9392505050565b600082601f83011261174f578081fd5b8151602061176461175f83611c9e565b611c6d565b80838252828201915082860187848660051b8901011115611783578586fd5b855b858110156117aa57815161179881611dbe565b84529284019290840190600101611785565b5090979650505050505050565b600082601f8301126117c7578081fd5b815160206117d761175f83611c9e565b80838252828201915082860187848660051b89010111156117f6578586fd5b855b858110156117aa578151845292840192908401906001016117f8565b600060208284031215611825578081fd5b813561173881611dbe565b600060208284031215611841578081fd5b815161173881611dbe565b60006020828403121561185d578081fd5b815167ffffffffffffffff811115611873578182fd5b61187f8482850161173f565b949350505050565b600060208284031215611898578081fd5b5035919050565b600080604083850312156118b1578081fd5b8235915060208301356118c381611dbe565b809150509250929050565b6000602082840312156118df578081fd5b81356001600160e01b031981168114611738578182fd5b600060208284031215611907578081fd5b815167ffffffffffffffff8082111561191e578283fd5b9083019060808286031215611931578283fd5b611939611c44565b825182811115611947578485fd5b611953878286016117b7565b825250602083015182811115611967578485fd5b6119738782860161173f565b60208301525060408301518281111561198a578485fd5b6119968782860161173f565b6040830152506060830151606082015280935050505092915050565b6000602082840312156119c3578081fd5b5051919050565b600080600080600060a086880312156119e1578081fd5b8535945060208601356119f381611dbe565b93506040860135611a0381611dbe565b94979396509394606081013594506080013592915050565b6000815180845260208085019450808401835b83811015611a535781516001600160a01b031687529582019590820190600101611a2e565b509495945050505050565b815160009082906020808601845b83811015611a915781516001600160a01b031685529382019390820190600101611a6c565b50929695505050505050565b815160009082906020808601845b83811015611a9157815185529382019390820190600101611aab565b60008351611ad9818460208801611d30565b835190830190611aed818360208801611d30565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611b2e816017850160208801611d30565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611b6b816028840160208801611d30565b01602801949350505050565b6020815260008251806020840152611b96816040850160208701611d30565b601f01601f19169190910160400192915050565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b80831015611bef5783518252928401926001929092019190840190611bcf565b50838701519350601f19925082868203016040870152611c0f8185611a1b565b93505050604085015181858403016060860152611c2c8382611a1b565b92505050606084015160808401528091505092915050565b6040516080810167ffffffffffffffff81118282101715611c6757611c67611da8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c9657611c96611da8565b604052919050565b600067ffffffffffffffff821115611cb857611cb8611da8565b5060051b60200190565b60008219821115611cd557611cd5611d92565b500190565b600082611cf557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611d1457611d14611d92565b500290565b600082821015611d2b57611d2b611d92565b500390565b60005b83811015611d4b578181015183820152602001611d33565b83811115611d5a576000848401525b50505050565b600081611d6f57611d6f611d92565b506000190190565b6000600019821415611d8b57611d8b611d92565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461040a57600080fdfea26469706673582212204c007dff74061c66d38d079aef1102ad7f361f802959962b06eda0ce4d3a1b4064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/YakWrapRouter.sol:YakWrapRouter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 695,
        "contract": "src/contracts/YakWrapRouter.sol:YakWrapRouter",
        "label": "router",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IYakRouter)1341"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IYakRouter)1341": {
        "encoding": "inplace",
        "label": "contract IYakRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/YakWrapRouter.sol:YakWrapRouter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/YakWrapRouter.sol:YakWrapRouter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}